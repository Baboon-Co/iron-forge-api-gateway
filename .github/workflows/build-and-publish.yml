name: Build and publish docker-image

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  DOCKER_REGISTRY: ghcr.io
  REGISTRY_IMAGE_NAME: ghcr.io/baboon-co/iron-forge/api-gateway

  NPM_REGISTRY: https://npm.pkg.github.com/
  NPM_PACKAGE_USER: baboon-co
  NPM_PACKAGE_REPO: iron-forge-api-gateway

jobs:
  build-and-publish:
    permissions:
      contents: read
      packages: write
    outputs:
      new_version: ${{ steps.versioning.outputs.new_version }}
      new_version_raw: ${{ steps.versioning.outputs.new_version_raw }}
      prefix: ${{ steps.versioning.outputs.prefix }}
    runs-on: ubuntu-latest
    steps:
      - name: Log into docker registry ${{ env.DOCKER_REGISTRY }}
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout
        uses: actions/checkout@v4.1.2
        with:
          fetch-depth: 0

      - name: Bump version
        id: versioning
        uses: nsmolianitski/semver-action@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build image
        run: docker build --build-arg NUGET_USERNAME=${{ github.actor }} --build-arg NUGET_PASSWORD=${{ secrets.GITHUB_TOKEN }} -t $REGISTRY_IMAGE_NAME:${{ steps.versioning.outputs.new_version }} .

      - name: Tag as 'latest'
        run: docker tag $REGISTRY_IMAGE_NAME:${{ steps.versioning.outputs.new_version }} $REGISTRY_IMAGE_NAME:latest

      - name: Push image to registry
        run: |
          docker push $REGISTRY_IMAGE_NAME:${{ steps.versioning.outputs.new_version }}
          docker push $REGISTRY_IMAGE_NAME:latest
  
  generate-openapi:
    runs-on: ubuntu-latest
    needs: [ build-and-publish ]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.2

      - name: Setup .NET 9
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Build project and generate OpenAPI
        run: dotnet build src/Web/Web.csproj --configuration Release
        env:
          GENERATE_OPENAPI: true

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: ${{ env.NPM_REGISTRY }}

      - name: Install OpenAPI-generator
        run: npm install -g @openapitools/openapi-generator-cli

      - name: Create typescript-client folder
        run: mkdir -p ./generated-typescript

      - name: Generate typescript-client
        shell: bash
        run: |
          openapi-generator-cli generate \
            -g typescript-axios \
            --additional-properties=npmName=@${{ github.repository_owner }}/${{ env.NPM_PACKAGE_REPO }} \
            --additional-properties=npmVersion=${{ needs.build-and-publish.outputs.new_version_raw }} \
            -i ./src/Web/generated/openapi/openapi.json \
            -o ./generated-typescript \
            --git-user-id=${{ env.NPM_PACKAGE_USER }} \
            --git-repo-id=${{ github.event.repository.name }}

      - name: Publish typescript-client package
        run: |
          cd ./generated-typescript
          npm i
          npm publish --registry=${{ env.NPM_REGISTRY }} --latest
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}